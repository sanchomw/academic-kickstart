parents = c("", "All Water","All Water", "Fresh", "Fresh", "Fresh")
100-2.5
labels = c("All Water","Salty", "Fresh")#, "Frozen", "Underground", "Surface")
parents = c("", "All Water","All Water")#, "Fresh", "Fresh", "Fresh")
plot_ly(labels = lables,
parents = parents,
values = 100, 97.5, 2.5)
library(blogdown)
library(tidyverse)
library(maps)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(plotly)
library(widgetframe)
library(httr)
library(openxlsx)
plot_ly(labels = lables,
parents = parents,
values = 100, 97.5, 2.5)
plot_ly(labels = lables,
parents = parents,
values = c(100, 97.5, 2.5),
type = "sunburts",
branchvalues = "total")
plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5),
type = "sunburts",
branchvalues = "total")
plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5),
type = "sunburst",
branchvalues = "total")
2.5*.68
2.5*.30.1
2.5*.301
2.5*.012
plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5, 1.7, 0.75, .03),
type = "sunburst",
branchvalues = "total")
labels = c("All Water","Salty", "Fresh", "Frozen", "Underground", "Surface")
parents = c("", "All Water","All Water", "Fresh", "Fresh", "Fresh")
plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5, 1.7, 0.75, .03),
type = "sunburst",
branchvalues = "total")
68+30.1+1.2
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68, 30.1,1.2),
type = "sunburst",
branchvalues = "total")
plot3b <- plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68.7, 30.1,1.2),
type = "sunburst",
branchvalues = "total")
plot3b
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68.7, 30.1,1.2),
type = "sunburst",
branchvalues = "total")
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68.7, 30.1, 1.2),
type = "sunburst",
branchvalues = "total")
68.7+30.1+1.2
plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5, 1.7, 0.75, .03),
type = "sunburst",
branchvalues = "total")
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68.7, 30.1, 1.2),
type = "sunburst",
branchvalues = "total")
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68.7, 30.1, 1.2),
type = "sunburst"#,
# branchvalues = "total"
)
plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68, 30.1, 1.2),
type = "sunburst",
branchvalues = "total"
)
#set up data
Sector <- c("Domestic/Household", "Industrial", "Agriculture")
Percent <- c(12, 19, 69)
temp.df <- cbind(Sector, Percent)
View(temp.df)
plot_ly(temp.df, labels = ~Sector, values = ~Percent, type = "pie")
temp.df <- as.data.frame(cbind(Sector, Percent))
plot_ly(temp.df, labels = ~Sector, values = ~Percent, type = "pie")
labels = c("All Water","Salty", "Fresh", "Frozen", "Underground", "Surface")
parents = c("", "All Water","All Water", "Fresh", "Fresh", "Fresh")
plot3a <- plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5, 1.7, 0.75, .03),
type = "sunburst",
branchvalues = "total")
library(blogdown)
library(tidyverse)
library(maps)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(plotly)
library(widgetframe)
library(httr)
library(openxlsx)
plot3a <- plot_ly(labels = labels,
parents = parents,
values = c(100, 97.5, 2.5, 1.7, 0.75, .03),
type = "sunburst",
branchvalues = "total")
plot3b <- plot_ly(labels = c("Fresh", "Frozen", "Underground", "Surface"),
parents = c("", "Fresh", "Fresh", "Fresh"),
values = c(100, 68, 30.1, 1.2),
type = "sunburst",
branchvalues = "total"
)
plot3a %>%
frameWidget(width = "100%", height = "100%")
plot3a %>%
frameWidget(width = "100%", height = "100%")
plot3b %>%
frameWidget(width = "100%", height = "100%")
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
View(animal.data)
View(plant.data)
animal.data %>% fill(`Product.description.(SITC)`)
animal.data <- animal.data %>% fill(`Product.description.(SITC)`)
View(animal.data)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
head(animal.data)
colnames(animal.data)
#need to fill data
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
colnames(plant.data)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`, Global.average)
View(plant.data)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
options(scipen = 999)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide
animal.data <- animal.data %>%
spread(., Water.Food.Print, Weighted.average)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
select(-Grazing:Industrial) %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)
View(animal.data)
plant.data <- plant.data %>%
spread(. Water.Footprint, Global.average)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average)
#get veg data
veg <- c(322, 1.34, 26, 154)
#get beef data
beef <- c(15415, 10.19, 112, 153)
#get veg data
veg <- c("Vegetables", 322, 1.34, 26, 154)
#get beef data
beef <- c("Beef", 15415, 10.19, 112, 153)
#combine
temp.df <- rbind(veg, beef)
#combine
temp.df <- as.data.frame(rbind(veg, beef))
View(temp.df)
#name columns
colnames(temp.df) <- c("Product", "Total Water Footprint", "Calorie (liter/kcal)",
"Protein (liter/g protein)", "Fat (liter/g fat)")
plot_ly(temp.df, x = ~Product, y = ~`Total Water Footprint`, type = "bar")
str(temp.df)
#make the numeric columns numeric
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.character(x))
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.numeric(x))
plot_ly(temp.df, x = ~Product, y = ~`Total Water Footprint`, type = "bar")
plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "bar") %>%
add_trace(y = ~`Protein (liter/g protein)`) %>%
add_trace(y = ~`Fat (liter/g fat)`)
plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "bar") %>%
add_trace(y = ~`Protein (liter/g protein)`) %>%
add_trace(y = ~`Fat (liter/g fat)`) %>%
layout(barmode = "group")
plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "bar")
15415/322
10.19/1.34
#set up data
Sector <- c("Domestic/Household", "Industrial", "Agriculture")
Percent <- c(12, 19, 69)
temp.df <- as.data.frame(cbind(Sector, Percent))
plot_ly(temp.df, labels = ~Sector, values = ~Percent, type = "pie") +
layout(title = "Worldwide Water Use by Sector")
plot_ly(temp.df, labels = ~Sector, values = ~Percent, type = "pie") +
layout(list(title = "Worldwide Water Use by Sector"))
plot_ly(temp.df, labels = ~Sector, values = ~Percent, type = "pie") %>%
layout(title = "Worldwide Water Use by Sector")
#plot 1 - no Cal
plot4a <- plot_ly(temp.df, x = ~Product, y = ~`Total Water Footprint`, type = "bar", name = "No Calories")
#plot 2 - with calories
plot4b <- plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "With Calories")
#plot 3 - Calories of Protein
plot4c <- plot_ly(temp.df, x = ~Product, y = ~`Protein (liter/g protein)`, type = "Calories of Protein")
#plot 4 - Calories of Fat
plot4d <- plot_ly(temp.df, x = ~Product, y = ~`Fat (liter/g fat)`, type = "Calories of Fat")
#combine
plot4 <- subplot(plot4a, plot4b, plot4c, plot4d)
View(temp.df)
#get veg data
veg <- c("Vegetables", 322, 1.34, 26, 154)
#get beef data
beef <- c("Beef", 15415, 10.19, 112, 153)
#combine
temp.df <- as.data.frame(rbind(veg, beef))
#name columns
colnames(temp.df) <- c("Product", "Total Water Footprint", "Calorie (liter/kcal)",
"Protein (liter/g protein)", "Fat (liter/g fat)")
#make the numeric columns numeric
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.character(x))
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.numeric(x))
#plot 1 - no Cal
plot4a <- plot_ly(temp.df, x = ~Product, y = ~`Total Water Footprint`, type = "bar", name = "No Calories")
#plot 2 - with calories
plot4b <- plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "With Calories")
#plot 3 - Calories of Protein
plot4c <- plot_ly(temp.df, x = ~Product, y = ~`Protein (liter/g protein)`, type = "Calories of Protein")
#plot 4 - Calories of Fat
plot4d <- plot_ly(temp.df, x = ~Product, y = ~`Fat (liter/g fat)`, type = "Calories of Fat")
#combine
plot4 <- subplot(plot4a, plot4b, plot4c, plot4d)
#combine
plot4 <- subplot(plot4a, plot4b, plot4c, plot4d, nrows = 2)
#get veg data
veg <- c("Vegetables", 322, 1.34, 26, 154)
#get beef data
beef <- c("Beef", 15415, 10.19, 112, 153)
#combine
temp.df <- as.data.frame(rbind(veg, beef))
#name columns
colnames(temp.df) <- c("Product", "Total Water Footprint", "Calorie (liter/kcal)",
"Protein (liter/g protein)", "Fat (liter/g fat)")
#make the numeric columns numeric
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.character(x))
temp.df[,2:5] <- apply(temp.df[,2:5], 2, function(x) as.numeric(x))
#plot 1 - no Cal
plot4a <- plot_ly(temp.df, x = ~Product, y = ~`Total Water Footprint`, type = "bar", name = "No Calories")
#plot 2 - with calories
plot4b <- plot_ly(temp.df, x = ~Product, y = ~`Calorie (liter/kcal)`, type = "bar", name = "With Calories")
#plot 3 - Calories of Protein
plot4c <- plot_ly(temp.df, x = ~Product, y = ~`Protein (liter/g protein)`, type = "bar", name = "Calories of Protein")
#plot 4 - Calories of Fat
plot4d <- plot_ly(temp.df, x = ~Product, y = ~`Fat (liter/g fat)`, type = "bar", name = "Calories of Fat")
#combine
plot4 <- subplot(plot4a, plot4b, plot4c, plot4d, nrows = 2)
plot4
blogdown::serve_site()
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average)
View(animal.data)
View(plant.data)
str(plant.data)
str(animal.data)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average) %>%
mutate(`Total Water` = Blue+Green+Grey)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)%>%
mutate(`Total Water` = Blue+Green+Grey)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average) %>%
mutate(`Total Water` = Blue+Green+Grey)
head(animal.data)
colnames(animal.data)
head(plant.data)
colnames(plant.data)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide, remove unecessary rows, get total water
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)%>%
mutate(`Total Water` = Blue+Green+Grey) %>%
select(`Description (short)` = Product.description.(SITC), `Description (long)` = Product.discription.(HS), Blue, Green, Grey, `Total Water`)
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)%>%
mutate(`Total Water` = Blue+Green+Grey)
colnames(animal.data)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide, remove unecessary rows, get total water
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)%>%
mutate(`Total Water` = Blue+Green+Grey) %>%
select(`Description (short)` = `Product.description.(SITC)`, `Description (long)` = `Product.discription.(HS)`, Blue, Green, Grey, `Total Water`)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average) %>%
mutate(`Total Water` = Blue+Green+Grey)  %>%
select(`Description (short)` = `Product.description.(SITC)`, `Description (long)` = `Product.description.(HS)`, Blue, Green, Grey, `Total Water`)
colnames(plant.data)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average) %>%
mutate(`Total Water` = Blue+Green+Grey)  %>%
select(`Description (short)` = `Product.description.(FAOSTAT)`, `Description (long)` = `Product.description.(HS)`, Blue, Green, Grey, `Total Water`)
#links
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
options(scipen = 999)
#need to click on the data in github, right click "view raw", and then click "Copy link address" for this to work
plant.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Crops.xlsx?raw=true")
animal.data <- read.xlsx("https://github.com/sanchomw/blog-data/blob/master/Water_Use_Animals.xlsx?raw=true")
#need to fill data down rows
animal.data <- animal.data %>%
fill(`HS.(PC-TAS).code`:Weighted.average)
plant.data <- plant.data %>%
fill(`Product.code.(FAOSTAT)`:Global.average)
#long to wide, remove unecessary rows, get total water
animal.data <- animal.data %>%
select(-c(Grazing:Industrial)) %>%
spread(., Water.Food.Print, Weighted.average)%>%
mutate(`Total Water` = Blue+Green+Grey) %>%
select(`Description (short)` = `Product.description.(SITC)`, `Description (long)` = `Product.discription.(HS)`, Blue, Green, Grey, `Total Water`)
plant.data <- plant.data %>%
spread(. ,Water.Footprint, Global.average) %>%
mutate(`Total Water` = Blue+Green+Grey)  %>%
select(`Description (short)` = `Product.description.(FAOSTAT)`, `Description (long)` = `Product.description.(HS)`, Blue, Green, Grey, `Total Water`)
View(animal.data)
temp.df <- plant.data %>%
arrange(`Total Water`) %>%
top_n(n = 5)
View(temp.df)
temp.df <- plant.data %>%
arrange(`Total Water`) %>%
filter(`Total Water` < 215)
colnames(temp.df)
#factor to save order when plotting
temp.df$`Description (short)` <- as.factor(temp.df$`Description (short)`, level = c(as.character(temp.df$`Description (short)`)))
#factor to save order when plotting
temp.df$`Description (short)` <- factor(temp.df$`Description (short)`, level = c(as.character(temp.df$`Description (short)`)))
#factor to save order when plotting
temp.df$`Description (long)` <- factor(temp.df$`Description (long)`, level = c(as.character(temp.df$`Description (long)`)))
library(scales)
#pull out bottom 5, get label for plotting
temp.df <- plant.data %>%
arrange(`Total Water`) %>%
filter(`Total Water` < 215) %>%
mutate(Label = comma(`Total Water`, accuracy = 1))
#factor to save order when plotting
temp.df$`Description (long)` <- factor(temp.df$`Description (long)`, level = c(as.character(temp.df$`Description (long)`)))
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue") %>%
add_trace(y = ~Green, name = "Green") %>%
add_trace(y = ~Grey, name = "Grey") %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint") %>%
layout(barmode = "stack")
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue") %>%
add_trace(y = ~Green, name = "Green") %>%
add_trace(y = ~Grey, name = "Grey") %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint") %>%
layout(barmode = "stack",
yaxis = list(title = "Water (Liters)"),
xaxis = list(title = "Product"))
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue") %>%
add_trace(y = ~Green, name = "Green", marker = list(color = "green")) %>%
add_trace(y = ~Grey, name = "Grey") %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint") %>%
layout(barmode = "stack",
yaxis = list(title = "Water (Liters)"),
xaxis = list(title = "Product"))
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue", marker = list(color = "blue")) %>%
add_trace(y = ~Green, name = "Green", marker = list(color = "green")) %>%
add_trace(y = ~Grey, name = "Grey", marker = list(color = "grey")) %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint") %>%
layout(barmode = "stack",
yaxis = list(title = "Water (Liters)"),
xaxis = list(title = "Product"))
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue", marker = list(color = "blue")) %>%
add_trace(y = ~Green, name = "Green", marker = list(color = "green")) %>%
add_trace(y = ~Grey, name = "Grey", marker = list(color = "grey")) %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint", marker = NULL) %>%
layout(barmode = "stack",
yaxis = list(title = "Water (Liters)"),
xaxis = list(title = "Product"))
#pull out bottom 5, get label for plotting
temp.df <- plant.data %>%
arrange(`Total Water`) %>%
filter(`Total Water` < 24300) %>%
mutate(Label = comma(`Total Water`, accuracy = 1))
#pull out bottom 5, get label for plotting
temp.df <- plant.data %>%
arrange(`Total Water`) %>%
filter(`Total Water` > 24300) %>%
mutate(Label = comma(`Total Water`, accuracy = 1))
#factor to save order when plotting
temp.df$`Description (long)` <- factor(temp.df$`Description (long)`, level = c(as.character(temp.df$`Description (long)`)))
plot_ly(temp.df, x = ~`Description (long)`, y =~Blue, type = "bar", name = "Blue", marker = list(color = "blue")) %>%
add_trace(y = ~Green, name = "Green", marker = list(color = "green")) %>%
add_trace(y = ~Grey, name = "Grey", marker = list(color = "grey")) %>%
add_text(y = ~`Total Water`, text = ~`Label`, hoverinfo = "none", textposition = "top center", name = "Total Water Footprint", marker = NULL) %>%
layout(barmode = "stack",
yaxis = list(title = "Water (Liters)"),
xaxis = list(title = "Product"))
