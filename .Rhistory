#convert name into a column
test <- str_replace(gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", all.cnames, perl=TRUE))
#convert name into a column
test <- str_squish(all.cnames)
all.cnames <- "Afghanistan                       Albania                           Algeria                           American Samoa                   Andorra                           Angola                            Anguilla                          Antigua and Barbuda              Argentina                         Armenia                           Aruba                             Australia                        Austria                           Azerbaijan                        Bahamas, The                      Bahrain                          Bangladesh                        Barbados                          Belarus                           Belgium                          Belize                            Benin                             Bermuda                           Bhutan                           Bolivia                           Bosnia and Herzegovina            Botswana                          Brazil                           British Virgin Islands            Brunei                            Bulgaria                          Burkina Faso                     Burma                             Burundi                           Cabo Verde                        Cambodia                         Cameroon                          Canada                            Cayman Islands                    Central African Republic         Chad                              Chile                             China                             Colombia                         Comoros                           Congo, Democratic Republic of the Congo, Republic of the            Cook Islands                     Costa Rica                        Cote d'Ivoire                     Croatia                           Cuba                             Curacao                           Cyprus                            Czech Republic                    Denmark                          Djibouti                          Dominica                          Dominican Republic                Ecuador                          Egypt                             El Salvador                       Equatorial Guinea                 Eritrea                          Estonia                           Ethiopia                          Falkland Islands (Islas Malvinas) Faroe Islands                    Fiji                              Finland                           France                            French Polynesia                 Gabon                             Gambia, The                       Georgia                           Germany                          Ghana                             Gibraltar                         Greece                            Greenland                        Grenada                           Guam                              Guatemala                         Guernsey                         Guinea-Bissau                     Guinea                            Guyana                            Haiti                            Honduras                          Hong Kong                         Hungary                           Iceland                          India                             Indonesia                         Iran                              Iraq                             Ireland                           Isle of Man                       Israel                            Italy                            Jamaica                           Japan                             Jersey                            Jordan                           Kazakhstan                        Kenya                             Kiribati                          Korea, North                     Korea, South                      Kosovo                            Kuwait                            Kyrgyzstan                       Laos                              Latvia                            Lebanon                           Lesotho                          Liberia                           Libya                             Liechtenstein                     Lithuania                        Luxembourg                        Macau                             Macedonia                         Madagascar                       Malawi                            Malaysia                          Maldives                          Mali                             Malta                             Marshall Islands                  Mauritania                        Mauritius                        Mexico                            Micronesia, Federated States of   Moldova                           Monaco                           Mongolia                          Montenegro                        Morocco                           Mozambique                       Namibia                           Nepal                             Netherlands                       New Caledonia                    New Zealand                       Nicaragua                         Nigeria                           Niger                            Niue                              Northern Mariana Islands          Norway                            Oman                             Pakistan                          Palau                             Panama                            Papua New Guinea                 Paraguay                          Peru                              Philippines                       Poland                           Portugal                          Puerto Rico                       Qatar                             Romania                          Russia                            Rwanda                            Saint Kitts and Nevis             Saint Lucia                      Saint Martin                      Saint Pierre and Miquelon         Saint Vincent and the Grenadines  Samoa                            San Marino                        Sao Tome and Principe             Saudi Arabia                      Senegal                          Serbia                            Seychelles                        Sierra Leone                      Singapore                        Sint Maarten                      Slovakia                          Slovenia                          Solomon Islands                  Somalia                           South Africa                      South Sudan                       Spain                            Sri Lanka                         Sudan                             Suriname                          Swaziland                        Sweden                            Switzerland                       Syria                             Taiwan                           Tajikistan                        Tanzania                          Thailand                          Timor-Leste                      Togo                              Tonga                             Trinidad and Tobago               Tunisia                          Turkey                            Turkmenistan                      Tuvalu                            Uganda                           Ukraine                           United Arab Emirates              United Kingdom                    United States                    Uruguay                           Uzbekistan                        Vanuatu                           Venezuela                        Vietnam                           Virgin Islands                    West Bank                         Yemen                            Zambia                            Zimbabwe"
#get full list of countries (need to do this otherwise map only shows countries in the data)
all.codes <- "AFG ALB DZA ASM AND AGO AIA ATG ARG ARM ABW AUS AUT AZE BHM BHR BGD BRB BLR BEL BLZ BEN BMU BTN BOL BIH BWA BRA VGB BRN BGR BFA MMR BDI CPV KHM CMR CAN CYM CAF TCD CHL CHN COL COM COD COG COK CRI CIV HRV CUB CUW CYP CZE DNK DJI DMA DOM ECU EGY SLV GNQ ERI EST ETH FLK FRO FJI FIN FRA PYF GAB GMB GEO DEU GHA GIB GRC GRL GRD GUM GTM GGY GNB GIN GUY HTI HND HKG HUN ISL IND IDN IRN IRQ IRL IMN ISR ITA JAM JPN JEY JOR KAZ KEN KIR PRK KOR KSV KWT KGZ LAO LVA LBN LSO LBR LBY LIE LTU LUX MAC MKD MDG MWI MYS MDV MLI MLT MHL MRT MUS MEX FSM MDA MCO MNG MNE MAR MOZ NAM NPL NLD NCL NZL NIC NGA NER NIU MNP NOR OMN PAK PLW PAN PNG PRY PER PHL POL PRT PRI QAT ROU RUS RWA KNA LCA MAF SPM VCT WSM SMR STP SAU SEN SRB SYC SLE SGP SXM SVK SVN SLB SOM ZAF SSD ESP LKA SDN SUR SWZ SWE CHE SYR TWN TJK TZA THA TLS TGO TON TTO TUN TUR TKM TUV UGA UKR ARE GBR USA URY UZB VUT VEN VNM VGB WBG YEM ZMB ZWE"
all.cnames <- "Afghanistan                       Albania                           Algeria                           American Samoa                   Andorra                           Angola                            Anguilla                          Antigua and Barbuda              Argentina                         Armenia                           Aruba                             Australia                        Austria                           Azerbaijan                        Bahamas, The                      Bahrain                          Bangladesh                        Barbados                          Belarus                           Belgium                          Belize                            Benin                             Bermuda                           Bhutan                           Bolivia                           Bosnia and Herzegovina            Botswana                          Brazil                           British Virgin Islands            Brunei                            Bulgaria                          Burkina Faso                     Burma                             Burundi                           Cabo Verde                        Cambodia                         Cameroon                          Canada                            Cayman Islands                    Central African Republic         Chad                              Chile                             China                             Colombia                         Comoros                           Congo, Democratic Republic of the Congo, Republic of the            Cook Islands                     Costa Rica                        Cote d'Ivoire                     Croatia                           Cuba                             Curacao                           Cyprus                            Czech Republic                    Denmark                          Djibouti                          Dominica                          Dominican Republic                Ecuador                          Egypt                             El Salvador                       Equatorial Guinea                 Eritrea                          Estonia                           Ethiopia                          Falkland Islands (Islas Malvinas) Faroe Islands                    Fiji                              Finland                           France                            French Polynesia                 Gabon                             Gambia, The                       Georgia                           Germany                          Ghana                             Gibraltar                         Greece                            Greenland                        Grenada                           Guam                              Guatemala                         Guernsey                         Guinea-Bissau                     Guinea                            Guyana                            Haiti                            Honduras                          Hong Kong                         Hungary                           Iceland                          India                             Indonesia                         Iran                              Iraq                             Ireland                           Isle of Man                       Israel                            Italy                            Jamaica                           Japan                             Jersey                            Jordan                           Kazakhstan                        Kenya                             Kiribati                          Korea, North                     Korea, South                      Kosovo                            Kuwait                            Kyrgyzstan                       Laos                              Latvia                            Lebanon                           Lesotho                          Liberia                           Libya                             Liechtenstein                     Lithuania                        Luxembourg                        Macau                             Macedonia                         Madagascar                       Malawi                            Malaysia                          Maldives                          Mali                             Malta                             Marshall Islands                  Mauritania                        Mauritius                        Mexico                            Micronesia, Federated States of   Moldova                           Monaco                           Mongolia                          Montenegro                        Morocco                           Mozambique                       Namibia                           Nepal                             Netherlands                       New Caledonia                    New Zealand                       Nicaragua                         Nigeria                           Niger                            Niue                              Northern Mariana Islands          Norway                            Oman                             Pakistan                          Palau                             Panama                            Papua New Guinea                 Paraguay                          Peru                              Philippines                       Poland                           Portugal                          Puerto Rico                       Qatar                             Romania                          Russia                            Rwanda                            Saint Kitts and Nevis             Saint Lucia                      Saint Martin                      Saint Pierre and Miquelon         Saint Vincent and the Grenadines  Samoa                            San Marino                        Sao Tome and Principe             Saudi Arabia                      Senegal                          Serbia                            Seychelles                        Sierra Leone                      Singapore                        Sint Maarten                      Slovakia                          Slovenia                          Solomon Islands                  Somalia                           South Africa                      South Sudan                       Spain                            Sri Lanka                         Sudan                             Suriname                          Swaziland                        Sweden                            Switzerland                       Syria                             Taiwan                           Tajikistan                        Tanzania                          Thailand                          Timor-Leste                      Togo                              Tonga                             Trinidad and Tobago               Tunisia                          Turkey                            Turkmenistan                      Tuvalu                            Uganda                           Ukraine                           United Arab Emirates              United Kingdom                    United States                    Uruguay                           Uzbekistan                        Vanuatu                           Venezuela                        Vietnam                           Virgin Islands                    West Bank                         Yemen                            Zambia                            Zimbabwe"
all.country.names <- "Afghanistan                       Albania                           Algeria                           American Samoa                   Andorra                           Angola                            Anguilla                          Antigua and Barbuda              Argentina                         Armenia                           Aruba                             Australia                        Austria                           Azerbaijan                        Bahamas, The                      Bahrain                          Bangladesh                        Barbados                          Belarus                           Belgium                          Belize                            Benin                             Bermuda                           Bhutan                           Bolivia                           Bosnia and Herzegovina            Botswana                          Brazil                           British Virgin Islands            Brunei                            Bulgaria                          Burkina Faso                     Burma                             Burundi                           Cabo Verde                        Cambodia                         Cameroon                          Canada                            Cayman Islands                    Central African Republic         Chad                              Chile                             China                             Colombia                         Comoros                           Congo, Democratic Republic of the Congo, Republic of the            Cook Islands                     Costa Rica                        Cote d'Ivoire                     Croatia                           Cuba                             Curacao                           Cyprus                            Czech Republic                    Denmark                          Djibouti                          Dominica                          Dominican Republic                Ecuador                          Egypt                             El Salvador                       Equatorial Guinea                 Eritrea                          Estonia                           Ethiopia                          Falkland Islands (Islas Malvinas) Faroe Islands                    Fiji                              Finland                           France                            French Polynesia                 Gabon                             Gambia, The                       Georgia                           Germany                          Ghana                             Gibraltar                         Greece                            Greenland                        Grenada                           Guam                              Guatemala                         Guernsey                         Guinea-Bissau                     Guinea                            Guyana                            Haiti                            Honduras                          Hong Kong                         Hungary                           Iceland                          India                             Indonesia                         Iran                              Iraq                             Ireland                           Isle of Man                       Israel                            Italy                            Jamaica                           Japan                             Jersey                            Jordan                           Kazakhstan                        Kenya                             Kiribati                          Korea, North                     Korea, South                      Kosovo                            Kuwait                            Kyrgyzstan                       Laos                              Latvia                            Lebanon                           Lesotho                          Liberia                           Libya                             Liechtenstein                     Lithuania                        Luxembourg                        Macau                             Macedonia                         Madagascar                       Malawi                            Malaysia                          Maldives                          Mali                             Malta                             Marshall Islands                  Mauritania                        Mauritius                        Mexico                            Micronesia, Federated States of   Moldova                           Monaco                           Mongolia                          Montenegro                        Morocco                           Mozambique                       Namibia                           Nepal                             Netherlands                       New Caledonia                    New Zealand                       Nicaragua                         Nigeria                           Niger                            Niue                              Northern Mariana Islands          Norway                            Oman                             Pakistan                          Palau                             Panama                            Papua New Guinea                 Paraguay                          Peru                              Philippines                       Poland                           Portugal                          Puerto Rico                       Qatar                             Romania                          Russia                            Rwanda                            Saint Kitts and Nevis             Saint Lucia                      Saint Martin                      Saint Pierre and Miquelon         Saint Vincent and the Grenadines  Samoa                            San Marino                        Sao Tome and Principe             Saudi Arabia                      Senegal                          Serbia                            Seychelles                        Sierra Leone                      Singapore                        Sint Maarten                      Slovakia                          Slovenia                          Solomon Islands                  Somalia                           South Africa                      South Sudan                       Spain                            Sri Lanka                         Sudan                             Suriname                          Swaziland                        Sweden                            Switzerland                       Syria                             Taiwan                           Tajikistan                        Tanzania                          Thailand                          Timor-Leste                      Togo                              Tonga                             Trinidad and Tobago               Tunisia                          Turkey                            Turkmenistan                      Tuvalu                            Uganda                           Ukraine                           United Arab Emirates              United Kingdom                    United States                    Uruguay                           Uzbekistan                        Vanuatu                           Venezuela                        Vietnam                           Virgin Islands                    West Bank                         Yemen                            Zambia                            Zimbabwe"
#get full list of countries (need to do this otherwise map only shows countries in the data)
all.codes <- "AFG ALB DZA ASM AND AGO AIA ATG ARG ARM ABW AUS AUT AZE BHM BHR BGD BRB BLR BEL BLZ BEN BMU BTN BOL BIH BWA BRA VGB BRN BGR BFA MMR BDI CPV KHM CMR CAN CYM CAF TCD CHL CHN COL COM COD COG COK CRI CIV HRV CUB CUW CYP CZE DNK DJI DMA DOM ECU EGY SLV GNQ ERI EST ETH FLK FRO FJI FIN FRA PYF GAB GMB GEO DEU GHA GIB GRC GRL GRD GUM GTM GGY GNB GIN GUY HTI HND HKG HUN ISL IND IDN IRN IRQ IRL IMN ISR ITA JAM JPN JEY JOR KAZ KEN KIR PRK KOR KSV KWT KGZ LAO LVA LBN LSO LBR LBY LIE LTU LUX MAC MKD MDG MWI MYS MDV MLI MLT MHL MRT MUS MEX FSM MDA MCO MNG MNE MAR MOZ NAM NPL NLD NCL NZL NIC NGA NER NIU MNP NOR OMN PAK PLW PAN PNG PRY PER PHL POL PRT PRI QAT ROU RUS RWA KNA LCA MAF SPM VCT WSM SMR STP SAU SEN SRB SYC SLE SGP SXM SVK SVN SLB SOM ZAF SSD ESP LKA SDN SUR SWZ SWE CHE SYR TWN TJK TZA THA TLS TGO TON TTO TUN TUR TKM TUV UGA UKR ARE GBR USA URY UZB VUT VEN VNM VGB WBG YEM ZMB ZWE"
#convert codes into a column
map.data <- as.data.frame(strsplit(all.countries, " ")[[1]])
#rename to make merging easier
colnames(map.data) <- "country.code"
#now to merge in the sars data
map.data <- left_join(map.data, sars.data)
View(map.data)
#clean it up for plotting
map.data$country.text[is.na(map.data$country.text)] <- "No Infections"
map.data[is.na(map.data)] <- 0
#plot it
#set boundary color
boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = TRUE, showcoastlines = FALSE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "Reds",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
#get full list of countries (need to do this otherwise map only shows countries in the data)
all.codes <- "AFG ALB DZA ASM AND AGO AIA ATG ARG ARM ABW AUS AUT AZE BHM BHR BGD BRB BLR BEL BLZ BEN BMU BTN BOL BIH BWA BRA VGB BRN BGR BFA MMR BDI CPV KHM CMR CAN CYM CAF TCD CHL CHN COL COM COD COG COK CRI CIV HRV CUB CUW CYP CZE DNK DJI DMA DOM ECU EGY SLV GNQ ERI EST ETH FLK FRO FJI FIN FRA PYF GAB GMB GEO DEU GHA GIB GRC GRL GRD GUM GTM GGY GNB GIN GUY HTI HND HKG HUN ISL IND IDN IRN IRQ IRL IMN ISR ITA JAM JPN JEY JOR KAZ KEN KIR PRK KOR KSV KWT KGZ LAO LVA LBN LSO LBR LBY LIE LTU LUX MAC MKD MDG MWI MYS MDV MLI MLT MHL MRT MUS MEX FSM MDA MCO MNG MNE MAR MOZ NAM NPL NLD NCL NZL NIC NGA NER NIU MNP NOR OMN PAK PLW PAN PNG PRY PER PHL POL PRT PRI QAT ROU RUS RWA KNA LCA MAF SPM VCT WSM SMR STP SAU SEN SRB SYC SLE SGP SXM SVK SVN SLB SOM ZAF SSD ESP LKA SDN SUR SWZ SWE CHE SYR TWN TJK TZA THA TLS TGO TON TTO TUN TUR TKM TUV UGA UKR ARE GBR USA URY UZB VUT VEN VNM VGB WBG YEM ZMB ZWE"
#convert codes into a column
map.data <- as.data.frame(strsplit(all.codes, " ")[[1]])
#rename to make merging easier
colnames(map.data) <- "country.code"
blogdown::serve_site()
#load the libraries
library(blogdown)
library(ggplot2)
library(tidyverse)
library(scales)
library(ggrepel)
library(plotly)
library(widgetframe)
#make a vector of years
Year <- c(1965, 2003, 2004, 2005, 2012, 2019)
#make a dummy variable for plotting
dummy <- c(1,1,1,1,1,1)
#make a vector of viruses
Virus <- c("229E &\nOC43", "SARS-CoV", "NL63", "HKU1", "MERS-CoV", "2019 Novel\nCoronavirus")
#combine the vectors and make a df
virus.year <- as.data.frame(cbind(Year, Virus, dummy))
#convert year to numeric
virus.year <- virus.year %>%
mutate(Year = as.numeric(as.character(Year)), 1, 1)
#clean it up
rm(Year, dummy, Virus)
#plot it
plot1 <- ggplot(virus.year, aes(x = Year, y = dummy, label = Virus)) +
geom_point(size = 4) +
geom_segment(aes(xend = Year, y = 0, yend = dummy)) +
geom_label(aes(y = 1.2)) +
labs(title = "Coronavirus Discovery by Year") +
#scale_x_date(labels = date_format("%Y"))+
scale_x_continuous(breaks = seq(from = 1960, to = 2020, by = 5))+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
plot.background = element_blank(), plot.title = element_text(hjust = 0.5),
text = element_text(size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_blank(),
legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
#plotify it
plot1 <- ggplotly(plot1, tooltip = c("label", "x"))
plot1 %>%
frameWidget(width = "100%", height = "100%")
#clean up last graph
rm(plot1, virus.year)
#datasource:
#get the raw data into vectors
country.text <- c("Australia","Canada","China","Hong Kong","Macau","Taiwan","France",
"Germany","India","Indonesia","Italy","Kuwait","Malaysia","Mongolia","New Zealand",
"Philippines","Ireland","Korea","Romania","Russia","Singapore","South Africa","Spain",
"Sweden","Switzerland","Thailand","United Kingdom","United States","Vietnam")
country.code <- c("AUS", "CAN", "CHN", "HKG", "MAC", "TWN", "FRA", "DEU", "IND",
"IDN", "ITA", "KWT", "MYS", "MNG", "NZL", "PHL", "IRL", "KOR",
"ROU", "RUS", "SGP", "ZAF", "ESP", "SWE", "CHE", "THA", "GBR",
"USA", "NVM")
infections <- c(6,251,5327,1755,1,346,7,9,3,2,4,1,5,9,1,14,1,3,1,1,238,1,1,5,1,9,4,27,63)
deaths <- c(0,43,349,299,0,37,1,0,0,0,0,0,2,0,0,2,0,0,0,0,33,1,0,0,0,2,0,0,5)
first.case <- c("2003-02-26","2003-02-23","2002-11-16","2003-02-15","2003-05-05","2003-02-25","2003-03-21",
"2003-03-09","2003-04-25","2003-04-06","2003-03-12","2003-04-09","2003-03-14","2003-03-31","2003-04-20",
"2003-02-25","2003-02-27","2003-04-25","2003-03-19","2003-05-05","2003-02-25","2003-04-03","2003-03-26",
"2003-03-28","2003-03-09","2003-03-11","2003-03-01","2003-02-24","2003-02-23")
last.case <- c("2003-04-01","2003-06-12","2003-06-03","2003-05-31","2003-05-05","2003-06-15","2003-05-03",
"2003-05-06","2003-05-06","2003-04-17","2003-04-20","2003-04-09","2003-04-22","2003-05-06","2003-04-20",
"2003-05-05","2003-02-27","2003-05-10","2003-03-19","2003-05-05","2003-05-05","2003-04-03","2003-03-26",
"2003-04-23","2003-03-09","2003-05-27","2003-04-01","2003-07-13","2003-04-14")
#combine the vectors into a dataframe
sars.data <- as.data.frame(cbind(country.code, country.text, infections, deaths, first.case, last.case))
#make everything character
sars.data[] <- lapply(sars.data, as.character)
#make sure deaths/infections are numeric
sars.data[,c(3,4)] <- apply(sars.data[,c(3,4)], 2, function(x) as.numeric(x))
#plot it
#set boundary color
boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = FALSE, showcoastlines = FALSE, showcountries = TRUE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "RdYlGn",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
plot2 %>%
frameWidget(width = "100%", height = "100%")
#clean up prior chart
rm(plot2, map.specs, sars.data, country, country.code, country.text, deaths, first.case, infections, last.case)
#read in the mers.data
mers.data <- read.csv(url("http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV"))
View(mers.data)
sum(is.na(mers.data$lat))
sum(is.na(mers.data$long))
table(mers.data$loc_confidence)
table(mers.data$shape_type)
table(mers.data$organism_type)
table(mers.data$loc_confidence)
#load the libraries
library(blogdown)
library(ggplot2)
library(tidyverse)
library(scales)
library(ggrepel)
library(plotly)
library(widgetframe)
#make a vector of years
Year <- c(1965, 2003, 2004, 2005, 2012, 2019)
#make a dummy variable for plotting
dummy <- c(1,1,1,1,1,1)
#make a vector of viruses
Virus <- c("229E &\nOC43", "SARS-CoV", "NL63", "HKU1", "MERS-CoV", "2019 Novel\nCoronavirus")
#combine the vectors and make a df
virus.year <- as.data.frame(cbind(Year, Virus, dummy))
#convert year to numeric
virus.year <- virus.year %>%
mutate(Year = as.numeric(as.character(Year)), 1, 1)
#clean it up
rm(Year, dummy, Virus)
#plot it
plot1 <- ggplot(virus.year, aes(x = Year, y = dummy, label = Virus)) +
geom_point(size = 4) +
geom_segment(aes(xend = Year, y = 0, yend = dummy)) +
geom_label(aes(y = 1.2)) +
labs(title = "Coronavirus Discovery by Year") +
#scale_x_date(labels = date_format("%Y"))+
scale_x_continuous(breaks = seq(from = 1960, to = 2020, by = 5))+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
plot.background = element_blank(), plot.title = element_text(hjust = 0.5),
text = element_text(size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_blank(),
legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
#plotify it
plot1 <- ggplotly(plot1, tooltip = c("label", "x"))
plot1 %>%
frameWidget(width = "100%", height = "100%")
#clean up last graph
rm(plot1, virus.year)
#datasource:
#get the raw data into vectors
country.text <- c("Australia","Canada","China","Hong Kong","Macau","Taiwan","France",
"Germany","India","Indonesia","Italy","Kuwait","Malaysia","Mongolia","New Zealand",
"Philippines","Ireland","Korea","Romania","Russia","Singapore","South Africa","Spain",
"Sweden","Switzerland","Thailand","United Kingdom","United States","Vietnam")
country.code <- c("AUS", "CAN", "CHN", "HKG", "MAC", "TWN", "FRA", "DEU", "IND",
"IDN", "ITA", "KWT", "MYS", "MNG", "NZL", "PHL", "IRL", "KOR",
"ROU", "RUS", "SGP", "ZAF", "ESP", "SWE", "CHE", "THA", "GBR",
"USA", "NVM")
infections <- c(6,251,5327,1755,1,346,7,9,3,2,4,1,5,9,1,14,1,3,1,1,238,1,1,5,1,9,4,27,63)
deaths <- c(0,43,349,299,0,37,1,0,0,0,0,0,2,0,0,2,0,0,0,0,33,1,0,0,0,2,0,0,5)
first.case <- c("2003-02-26","2003-02-23","2002-11-16","2003-02-15","2003-05-05","2003-02-25","2003-03-21",
"2003-03-09","2003-04-25","2003-04-06","2003-03-12","2003-04-09","2003-03-14","2003-03-31","2003-04-20",
"2003-02-25","2003-02-27","2003-04-25","2003-03-19","2003-05-05","2003-02-25","2003-04-03","2003-03-26",
"2003-03-28","2003-03-09","2003-03-11","2003-03-01","2003-02-24","2003-02-23")
last.case <- c("2003-04-01","2003-06-12","2003-06-03","2003-05-31","2003-05-05","2003-06-15","2003-05-03",
"2003-05-06","2003-05-06","2003-04-17","2003-04-20","2003-04-09","2003-04-22","2003-05-06","2003-04-20",
"2003-05-05","2003-02-27","2003-05-10","2003-03-19","2003-05-05","2003-05-05","2003-04-03","2003-03-26",
"2003-04-23","2003-03-09","2003-05-27","2003-04-01","2003-07-13","2003-04-14")
#combine the vectors into a dataframe
sars.data <- as.data.frame(cbind(country.code, country.text, infections, deaths, first.case, last.case))
#make everything character
sars.data[] <- lapply(sars.data, as.character)
#make sure deaths/infections are numeric
sars.data[,c(3,4)] <- apply(sars.data[,c(3,4)], 2, function(x) as.numeric(x))
#plot it
#set boundary color
boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = FALSE, showcoastlines = FALSE, showcountries = TRUE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "RdYlGn",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
plot2 %>%
frameWidget(width = "100%", height = "100%")
#clean up prior chart
rm(plot2, map.specs, sars.data, country, country.code, country.text, deaths, first.case, infections, last.case)
#read in the mers.data
mers.data <- read.csv(url("http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV"))
#load the libraries
library(blogdown)
library(ggplot2)
library(tidyverse)
library(scales)
library(ggrepel)
library(plotly)
library(widgetframe)
#make a vector of years
Year <- c(1965, 2003, 2004, 2005, 2012, 2019)
#make a dummy variable for plotting
dummy <- c(1,1,1,1,1,1)
#make a vector of viruses
Virus <- c("229E &\nOC43", "SARS-CoV", "NL63", "HKU1", "MERS-CoV", "2019 Novel\nCoronavirus")
#combine the vectors and make a df
virus.year <- as.data.frame(cbind(Year, Virus, dummy))
#convert year to numeric
virus.year <- virus.year %>%
mutate(Year = as.numeric(as.character(Year)), 1, 1)
#clean it up
rm(Year, dummy, Virus)
#plot it
plot1 <- ggplot(virus.year, aes(x = Year, y = dummy, label = Virus)) +
geom_point(size = 4) +
geom_segment(aes(xend = Year, y = 0, yend = dummy)) +
geom_label(aes(y = 1.2)) +
labs(title = "Coronavirus Discovery by Year") +
#scale_x_date(labels = date_format("%Y"))+
scale_x_continuous(breaks = seq(from = 1960, to = 2020, by = 5))+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
plot.background = element_blank(), plot.title = element_text(hjust = 0.5),
text = element_text(size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_blank(),
legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
#plotify it
plot1 <- ggplotly(plot1, tooltip = c("label", "x"))
plot1 %>%
frameWidget(width = "100%", height = "100%")
#clean up last graph
rm(plot1, virus.year)
#datasource:
#get the raw data into vectors
country.text <- c("Australia","Canada","China","Hong Kong","Macau","Taiwan","France",
"Germany","India","Indonesia","Italy","Kuwait","Malaysia","Mongolia","New Zealand",
"Philippines","Ireland","Korea","Romania","Russia","Singapore","South Africa","Spain",
"Sweden","Switzerland","Thailand","United Kingdom","United States","Vietnam")
country.code <- c("AUS", "CAN", "CHN", "HKG", "MAC", "TWN", "FRA", "DEU", "IND",
"IDN", "ITA", "KWT", "MYS", "MNG", "NZL", "PHL", "IRL", "KOR",
"ROU", "RUS", "SGP", "ZAF", "ESP", "SWE", "CHE", "THA", "GBR",
"USA", "NVM")
infections <- c(6,251,5327,1755,1,346,7,9,3,2,4,1,5,9,1,14,1,3,1,1,238,1,1,5,1,9,4,27,63)
deaths <- c(0,43,349,299,0,37,1,0,0,0,0,0,2,0,0,2,0,0,0,0,33,1,0,0,0,2,0,0,5)
first.case <- c("2003-02-26","2003-02-23","2002-11-16","2003-02-15","2003-05-05","2003-02-25","2003-03-21",
"2003-03-09","2003-04-25","2003-04-06","2003-03-12","2003-04-09","2003-03-14","2003-03-31","2003-04-20",
"2003-02-25","2003-02-27","2003-04-25","2003-03-19","2003-05-05","2003-02-25","2003-04-03","2003-03-26",
"2003-03-28","2003-03-09","2003-03-11","2003-03-01","2003-02-24","2003-02-23")
last.case <- c("2003-04-01","2003-06-12","2003-06-03","2003-05-31","2003-05-05","2003-06-15","2003-05-03",
"2003-05-06","2003-05-06","2003-04-17","2003-04-20","2003-04-09","2003-04-22","2003-05-06","2003-04-20",
"2003-05-05","2003-02-27","2003-05-10","2003-03-19","2003-05-05","2003-05-05","2003-04-03","2003-03-26",
"2003-04-23","2003-03-09","2003-05-27","2003-04-01","2003-07-13","2003-04-14")
#combine the vectors into a dataframe
sars.data <- as.data.frame(cbind(country.code, country.text, infections, deaths, first.case, last.case))
#make everything character
sars.data[] <- lapply(sars.data, as.character)
#make sure deaths/infections are numeric
sars.data[,c(3,4)] <- apply(sars.data[,c(3,4)], 2, function(x) as.numeric(x))
#plot it
#set boundary color
boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = FALSE, showcoastlines = FALSE, showcountries = TRUE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "RdYlGn",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
plot2 %>%
frameWidget(width = "100%", height = "100%")
861/2499
#clean up prior chart
rm(plot2, map.specs, sars.data, country, country.code, country.text, deaths, first.case, infections, last.case)
#read in the mers.data
mers.data <- read.csv(url("http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV"))
table(mers.data$organism_type)
table(mers.data$lat)
table(mers.data$organism_type)
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
colnames(mers.clean)
test <- mers.clean[complete.cases(mers.clean[ , 26:27])]
test <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
View(test)
sum(is.na(test$long))
sum(is.na(test$lat))
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
rm(test)
table(mers.data$organism_type)
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
646-402
882-233-3-244
402/2499
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
View(mers.clean)
table(mers.clean$patient_type)
table(mers.clean$transmission_route)
colnames(mers.clean)
table(mers.data$year_start)
table(mers.data$year_end)
View(mers.clean)
table(mers.clean$year_start)
table(mers.clean$year_end)
sum(is.na(mers.clean$year_start))
sum(is.na(mers.clean$year_end))
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
#load the libraries
library(blogdown)
library(ggplot2)
library(tidyverse)
library(scales)
library(ggrepel)
library(plotly)
library(widgetframe)
#make a vector of years
Year <- c(1965, 2003, 2004, 2005, 2012, 2019)
#make a dummy variable for plotting
dummy <- c(1,1,1,1,1,1)
#make a vector of viruses
Virus <- c("229E &\nOC43", "SARS-CoV", "NL63", "HKU1", "MERS-CoV", "2019 Novel\nCoronavirus")
#combine the vectors and make a df
virus.year <- as.data.frame(cbind(Year, Virus, dummy))
#convert year to numeric
virus.year <- virus.year %>%
mutate(Year = as.numeric(as.character(Year)), 1, 1)
#clean it up
rm(Year, dummy, Virus)
#plot it
plot1 <- ggplot(virus.year, aes(x = Year, y = dummy, label = Virus)) +
geom_point(size = 4) +
geom_segment(aes(xend = Year, y = 0, yend = dummy)) +
geom_label(aes(y = 1.2)) +
labs(title = "Coronavirus Discovery by Year") +
#scale_x_date(labels = date_format("%Y"))+
scale_x_continuous(breaks = seq(from = 1960, to = 2020, by = 5))+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
plot.background = element_blank(), plot.title = element_text(hjust = 0.5),
text = element_text(size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_blank(),
legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
#plotify it
plot1 <- ggplotly(plot1, tooltip = c("label", "x"))
plot1 %>%
frameWidget(width = "100%", height = "100%")
#clean up last graph
rm(plot1, virus.year)
#datasource:
#get the raw data into vectors
country.text <- c("Australia","Canada","China","Hong Kong","Macau","Taiwan","France",
"Germany","India","Indonesia","Italy","Kuwait","Malaysia","Mongolia","New Zealand",
"Philippines","Ireland","Korea","Romania","Russia","Singapore","South Africa","Spain",
"Sweden","Switzerland","Thailand","United Kingdom","United States","Vietnam")
country.code <- c("AUS", "CAN", "CHN", "HKG", "MAC", "TWN", "FRA", "DEU", "IND",
"IDN", "ITA", "KWT", "MYS", "MNG", "NZL", "PHL", "IRL", "KOR",
"ROU", "RUS", "SGP", "ZAF", "ESP", "SWE", "CHE", "THA", "GBR",
"USA", "NVM")
infections <- c(6,251,5327,1755,1,346,7,9,3,2,4,1,5,9,1,14,1,3,1,1,238,1,1,5,1,9,4,27,63)
deaths <- c(0,43,349,299,0,37,1,0,0,0,0,0,2,0,0,2,0,0,0,0,33,1,0,0,0,2,0,0,5)
first.case <- c("2003-02-26","2003-02-23","2002-11-16","2003-02-15","2003-05-05","2003-02-25","2003-03-21",
"2003-03-09","2003-04-25","2003-04-06","2003-03-12","2003-04-09","2003-03-14","2003-03-31","2003-04-20",
"2003-02-25","2003-02-27","2003-04-25","2003-03-19","2003-05-05","2003-02-25","2003-04-03","2003-03-26",
"2003-03-28","2003-03-09","2003-03-11","2003-03-01","2003-02-24","2003-02-23")
last.case <- c("2003-04-01","2003-06-12","2003-06-03","2003-05-31","2003-05-05","2003-06-15","2003-05-03",
"2003-05-06","2003-05-06","2003-04-17","2003-04-20","2003-04-09","2003-04-22","2003-05-06","2003-04-20",
"2003-05-05","2003-02-27","2003-05-10","2003-03-19","2003-05-05","2003-05-05","2003-04-03","2003-03-26",
"2003-04-23","2003-03-09","2003-05-27","2003-04-01","2003-07-13","2003-04-14")
#combine the vectors into a dataframe
sars.data <- as.data.frame(cbind(country.code, country.text, infections, deaths, first.case, last.case))
#make everything character
sars.data[] <- lapply(sars.data, as.character)
#make sure deaths/infections are numeric
sars.data[,c(3,4)] <- apply(sars.data[,c(3,4)], 2, function(x) as.numeric(x))
#plot it
#set boundary color
boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = FALSE, showcoastlines = FALSE, showcountries = TRUE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "RdYlGn",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
plot2 %>%
frameWidget(width = "100%", height = "100%")
#clean up prior chart
rm(plot2, map.specs, sars.data, country, country.code, country.text, deaths, first.case, infections, last.case)
#read in the mers.data
mers.data <- read.csv(url("http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV"))
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, month_start, year_start, month_end, year_end)
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, month_start, year_start, month_end, year_end) %>%
mutate(start_date = paste(month_start, year_start),
end_date = paste(month_end, year_end))
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, month_start, year_start, month_end, year_end) %>%
mutate(start_date = paste(month_start, year_start),
end_date = paste(month_end, year_end))
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, month_start, year_start, month_end, year_end) %>%
mutate(start_date = paste(month_start, year_start, sep = "-"),
end_date = paste(month_end, year_end, sep = "-"))
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, year_start, year_end)
#set up the map specs
map.specs <- list(  scope = "world", projection = list(type = "Mercator"),  showland = TRUE,  landcolor = toRGB("gray88"),  subunitwidth = 0.5,
countrywidth = 0.5,  subunitcolor = toRGB("white"), countrycolor = toRGB("white"))
#set up the map specs
map.specs <- list(  scope = "world", projection = list(type = "Mercator"),  showland = TRUE,  landcolor = toRGB("gray88"),  subunitwidth = 0.5,
countrywidth = 0.5,  subunitcolor = toRGB("white"), countrycolor = toRGB("white"))
p <- plot_geo(mers.clean, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(paste("Patient Type:", patient_type), paste("Transmission Route:", transmission_route) sep = "<br />"),
p <- plot_geo(mers.clean, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(paste("Patient Type:", patient_type), paste("Transmission Route:", transmission_route), sep = "<br />"),
symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
layout(
title = 'MERS Infections', geo = map.specs
)
serve_site()
stop_server()
table(mers.clean$patient_type)
table(mers.clean$transmission_route)
serve_site()
ncov1 <- read.csv("static/data/post1_2019_nCoV_data.csv")
getwd()
ncov1 <- read.csv("~/static/data/post1_2019_nCoV_data.csv")
