boundary.color <- list(color = toRGB("grey"), width = 0.5)
#map specs
map.specs <- list(showframe = FALSE, showcoastlines = FALSE, showcountries = TRUE, projection = list(type = "Mercator"))
plot2 <- plot_geo(sars.data) %>%
add_trace(z = ~infections, color = ~infections, colors = "RdYlGn",
text = ~paste0(country.text , "\n" , "Cases:" , infections , "\n" , "Deaths:" , deaths),
locations = ~country.code, marker = list(line = boundary.color)) %>%
colorbar(title = "Deaths") %>%
layout(title = 'Global SARS Outbreak<br>Source: <a href="https://www.who.int/csr/sars/country/table2004_04_21/en/">WHO</a>',
geo = map.specs)
plot2 %>%
frameWidget(width = "100%", height = "100%")
#clean up prior chart
rm(plot2, map.specs, sars.data, country, country.code, country.text, deaths, first.case, infections, last.case)
#read in the mers.data
mers.data <- read.csv(url("http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV"))
#first filter to human
mers.clean <- mers.data %>%
filter(organism_type == "human")
#get only the cases with long/lat data
mers.clean <- mers.clean[complete.cases(mers.clean[ , 26:27]),]
#select the columns i want
mers.clean <- mers.clean %>%
select(patient_type, transmission_route, lat, long, year = year_start, year_end)
#set up the map specs
map.specs <- list(  scope = "world", projection = list(type = "Mercator"),  showland = TRUE,  landcolor = toRGB("gray88"),  subunitwidth = 0.5,
countrywidth = 0.5,  subunitcolor = toRGB("white"), countrycolor = toRGB("white"), showcountries = TRUE)
plot3 <- plot_geo(mers.clean, lat = ~lat, lon = ~long, frame = ~year) %>%
add_markers(text = ~paste("Patient Type:", patient_type),
symbol = I("square"), size = I(8), hoverinfo = "text", marker = list(line = boundary.color), color = "firebrick1") %>%
layout(title = 'MERS Infections by Year<br>Source: <a href="http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_MERS_COV_DATABASE_1983_2017_Y2019M07D23.CSV">WHO</a>',
geo = map.specs, showlegend = FALSE)
plot3 %>%
frameWidget(width = "100%", height = "100%")
#clean up the mess
rm(plot3, mers.data, mers.clean)
ncov19.day <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/2019_nCoV_data.csv"))
ncov19.confirm <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/time_series_2019_ncov_confirmed.csv"))
ncov19.deaths <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/time_series_2019_ncov_deaths.csv"))
ncov19.recover <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/time_series_2019_ncov_recovered.csv"))
head(ncov19.day)
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
View(temp.df)
str(temp.df$Date)
#change date to proper object
test <- temp.df %>%
mutate(Date = strptime(as.character(Date)), "%d/%m/%Y")
#change date to proper object
test <- temp.df %>%
mutate(Date = strptime(as.character(Date), "%d/%m/%Y"))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.character(Date), "%d/%m/%Y")))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))),, origin="1970-01-01")
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))), origin="1970-01-01")
#change date to proper object
test <- temp.df %>%
mutate(Date = as.character(Date))
View(test)
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 10))
View(test)
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 9))
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 10))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10)))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
head(temp.df)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
temp.df %>%
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) #%>%
animation_opts(
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
head(txhousing)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- ncov19.day %>%
accumulate_by(~Date)
View(temp.df)
str(txhousing)
#prep data for plotting
ncov19.day$Date <- as.Date(substr(as.character(ncov19.day$Date), start = 1, stop = 10), "%m/%d/%Y")
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- ncov19.day %>%
accumulate_by(~Date)
View(temp.df)
ncov19.day <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/2019_nCoV_data.csv"))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
#use this function
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#clean it
temp.df <- temp.df %>%
accumulate_by(~Date)
head(temp.df)
#plot it
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Median",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
View(temp.df)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
head(temp.df)
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status)) +
geom_line()+
geom_point()
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line()+
geom_point()
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line(aes(frame = f))+
geom_point(aes(frame = f))
#plot it
plot4 <- ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line(aes(frame = f))+
geom_point(aes(frame = f))
plot4 <- ggplotly(plot4)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- temp.df %>%
accumulate_by(~Date)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) #%>%
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))# %>%
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) #%>%
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- temp.df %>%
accumulate_by(~Date)
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplotly(plot4) %>%
layout(
title = "NCoV-19 Deaths",
yaxis = list(
title = "Deaths",
zeroline = F
),
xaxis = list(
title = "Day",
zeroline = F,
showgrid = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
currentvalue = list(
prefix = "Date "
)
)
colnames(temp.df)
blogdown::serve_site()
blogdown::serve_site()
packrat::init()
library(blogdown)
blogdown::new_post()
install.packages("miniUI")
blogdown:::new_post_addin()
library(ggplot2)
worlddata <- map_data("world") %>%
fortify()
library(dplyr)
worlddata <- map_data("world") %>%
fortify()
library(maps)
install.packages("amps")
install.packages("maps")
library(maps)
blogdown::build_site()
blogdown::serve_site()
1+1
blogdown::serve_site()
library(tidyverse)
library(tidyverse)
library(maps)
#get the world map data
world <- map_data("world")
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(10, 25), ylim = c(-40, -25), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(10, 25), ylim = c(-40, -25), expand = FALSE)
install.packages("sf")
