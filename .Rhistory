#change date to proper object
test <- temp.df %>%
mutate(Date = strptime(as.character(Date)), "%d/%m/%Y")
#change date to proper object
test <- temp.df %>%
mutate(Date = strptime(as.character(Date), "%d/%m/%Y"))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.character(Date), "%d/%m/%Y")))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))),, origin="1970-01-01")
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(as.POSIXct(as.numeric(as.character(Date), "%d/%m/%Y"))), origin="1970-01-01")
#change date to proper object
test <- temp.df %>%
mutate(Date = as.character(Date))
View(test)
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 10))
View(test)
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 9))
#change date to proper object
test <- temp.df %>%
mutate(Date = substr(as.character(Date), start = 1, stop = 10))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10)))
#change date to proper object
test <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
head(temp.df)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
temp.df %>%
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
) #%>%
animation_opts(
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Count",
zeroline = F
)
)
head(txhousing)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- ncov19.day %>%
accumulate_by(~Date)
View(temp.df)
str(txhousing)
#prep data for plotting
ncov19.day$Date <- as.Date(substr(as.character(ncov19.day$Date), start = 1, stop = 10), "%m/%d/%Y")
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- ncov19.day %>%
accumulate_by(~Date)
View(temp.df)
ncov19.day <- read.csv(url("https://raw.githubusercontent.com/sanchomw/blog-data/master/2019_nCoV_data.csv"))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
#use this function
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
#clean it
temp.df <- temp.df %>%
accumulate_by(~Date)
head(temp.df)
#plot it
temp.df %>%
plot_ly(
x = ~Date,
y = ~Value,
split = ~Status,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
) %>%
layout(
xaxis = list(
title = "Date",
zeroline = F
),
yaxis = list(
title = "Median",
zeroline = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
hide = T
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
View(temp.df)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
head(temp.df)
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status)) +
geom_line()+
geom_point()
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line()+
geom_point()
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) %>%
gather(., Status, Value, Cases: Recoveries)
#plot it
ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line(aes(frame = f))+
geom_point(aes(frame = f))
#plot it
plot4 <- ggplot(temp.df, aes(x = Date, y = Value, group = Status, color = Status)) +
geom_line(aes(frame = f))+
geom_point(aes(frame = f))
plot4 <- ggplotly(plot4)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y"))
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- temp.df %>%
accumulate_by(~Date)
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered)) %>%
mutate(f = 1:n())
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) #%>%
#prep the cleaning data for plotting
temp.df <- ncov19.day %>%
group_by(Date) %>%
summarise(Cases = sum(Confirmed),
Deaths = sum(Deaths),
Recoveries = sum(Recovered))# %>%
#change date to proper object
temp.df <- temp.df %>%
mutate(Date = as.Date(substr(as.character(Date), start = 1, stop = 10), "%m/%d/%Y")) #%>%
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
temp.df <- temp.df %>%
accumulate_by(~Date)
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplot(temp.df,aes(Date, Cases, frame = frame)) +
geom_line()
plot4 <- ggplotly(plot4) %>%
layout(
title = "NCoV-19 Deaths",
yaxis = list(
title = "Deaths",
zeroline = F
),
xaxis = list(
title = "Day",
zeroline = F,
showgrid = F
)
) %>%
animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
) %>%
animation_slider(
currentvalue = list(
prefix = "Date "
)
)
colnames(temp.df)
blogdown::serve_site()
blogdown::serve_site()
packrat::init()
library(blogdown)
blogdown::new_post()
install.packages("miniUI")
blogdown:::new_post_addin()
library(ggplot2)
worlddata <- map_data("world") %>%
fortify()
library(dplyr)
worlddata <- map_data("world") %>%
fortify()
library(maps)
install.packages("amps")
install.packages("maps")
library(maps)
blogdown::build_site()
blogdown::serve_site()
1+1
blogdown::serve_site()
library(tidyverse)
library(tidyverse)
library(maps)
#get the world map data
world <- map_data("world")
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(10, 25), ylim = c(-40, -25), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(10, 25), ylim = c(-40, -25), expand = FALSE)
install.packages("sf")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
library(blogdown)
library(tidyverse)
library(maps)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(plotly)
library(widgetframe)
library(httr)
#links
#https://www.usgs.gov/special-topic/water-science-school/science/how-much-water-there-earth?qt-science_center_objects=0#qt-science_center_objects
#https://www.usgs.gov/special-topic/water-science-school/science/where-earths-water?qt-science_center_objects=0#qt-science_center_objects
#https://waterfootprint.org/en/resources/waterstat/product-water-footprint-statistics/
#get the world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
plot1 <- ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-20,50), ylim = c(-40, 30), expand = FALSE)+
geom_rect(xmin = 14, xmax = 22, ymin = -37, ymax = -29, fill = NA, color = "black", size = 1.5) +
labs(x = "", y = "")+
theme_bw()+
theme(panel.background = element_rect(fill = "azure"),
panel.border = element_rect(fill = NA))
#plot1 <- ggplotly(plot1)
plot2 <- ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5, unit_category = "imperial") +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(14, 22), ylim = c(-37, -29), expand = FALSE)+
geom_point(aes(x = 18.4241, y = -33.9249), shape = 21, color = "blue",size = 15, fill = NA)+
labs(x = "", y = "")+
theme_bw()+
theme(panel.background = element_rect(fill = "azure"),
panel.border = element_rect(fill = NA))
#plot2 <- ggplotly(plot2)
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
#33.9249° S, 18.4241° E
plot1 #%>%
#frameWidget(width = "100%", height = "100%")
plot2 #%>%
#frameWidget(width = "100%", height = "100%")
